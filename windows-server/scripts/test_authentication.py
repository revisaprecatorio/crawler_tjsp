"""
Test de Autentica√ß√£o - e-SAJ TJSP com Certificado Digital
=========================================================

Este script testa a autentica√ß√£o no e-SAJ usando certificado digital A1
via Web Signer (Native Messaging Protocol).

IMPORTANTE: Este √© o teste cr√≠tico que valida se a migra√ß√£o para Windows
resolveu o bloqueio do Native Messaging Protocol.

Uso:
    python test_authentication.py

Pr√©-requisitos:
    - Chrome instalado
    - ChromeDriver instalado e no PATH
    - Web Signer rodando
    - Certificado A1 importado no Windows Certificate Store
    - Extens√£o Web Signer carregada no Chrome
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import os
from datetime import datetime

# ====================
# CONFIGURA√á√ïES
# ====================

CHROME_BINARY = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
CHROMEDRIVER_PATH = r"C:\chromedriver\chromedriver.exe"
# N√ÉO USAR user-data-dir customizado! Deixar Chrome usar perfil padr√£o (onde Web Signer est√° instalado)
USER_DATA_DIR = None  # Alterado de r"C:\temp\chrome-profile-test"
EXTENSION_PATH = r"C:\projetos\crawler_tjsp\chrome_extension"
SCREENSHOTS_DIR = r"C:\projetos\crawler_tjsp\screenshots"
LOG_FILE = r"C:\projetos\crawler_tjsp\logs\test_auth.log"

ESAJ_URL = "https://esaj.tjsp.jus.br/esaj/portal.do"

# ====================
# FUN√á√ïES AUXILIARES
# ====================

def log(message, level="INFO"):
    """Escreve mensagem no log e console."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] [{level}] {message}"
    print(log_message)

    # Criar diret√≥rio de logs se n√£o existir
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(log_message + "\n")

def save_screenshot(driver, name):
    """Salva screenshot com timestamp."""
    os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filepath = os.path.join(SCREENSHOTS_DIR, f"{name}_{timestamp}.png")
    driver.save_screenshot(filepath)
    log(f"üì∏ Screenshot salvo: {filepath}")
    return filepath

def setup_chrome():
    """Configura e retorna inst√¢ncia do Chrome via Selenium."""
    log("üîß Configurando Chrome...")

    # Op√ß√µes do Chrome
    chrome_options = Options()
    chrome_options.binary_location = CHROME_BINARY

    # Configura√ß√µes importantes
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    # N√ÉO adicionar --user-data-dir! Deixar Chrome usar perfil padr√£o (revisa.precatorio@gmail.com)
    # Isso replica o comportamento do PowerShell Start-Process que abre o perfil correto
    # Se adicionarmos user-data-dir, Chrome cria perfil novo sem Web Signer
    if USER_DATA_DIR:
        os.makedirs(USER_DATA_DIR, exist_ok=True)
        chrome_options.add_argument(f"--user-data-dir={USER_DATA_DIR}")
        log(f"  ‚ö†Ô∏è Usando perfil customizado: {USER_DATA_DIR}")
    else:
        log(f"  ‚úÖ Usando perfil padr√£o do Chrome (onde Web Signer est√° instalado)")

    # Carregar extens√£o Web Signer (se existir localmente)
    if os.path.exists(EXTENSION_PATH):
        chrome_options.add_argument(f"--load-extension={EXTENSION_PATH}")
        log(f"  ‚úÖ Extens√£o carregada: {EXTENSION_PATH}")
    else:
        log(f"  ‚ö†Ô∏è Extens√£o n√£o encontrada em: {EXTENSION_PATH}", "WARNING")
        log(f"  ‚ÑπÔ∏è  A extens√£o pode estar instalada via Chrome Web Store", "INFO")

    # Prefer√™ncias
    prefs = {
        "download.default_directory": r"C:\projetos\crawler_tjsp\downloads",
        "download.prompt_for_download": False,
        "plugins.always_open_pdf_externally": True
    }
    chrome_options.add_experimental_option("prefs", prefs)
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option("useAutomationExtension", False)

    # Service (ChromeDriver)
    service = Service(executable_path=CHROMEDRIVER_PATH)

    try:
        driver = webdriver.Chrome(service=service, options=chrome_options)
        log("  ‚úÖ Chrome iniciado com sucesso!")
        return driver
    except Exception as e:
        log(f"  ‚ùå Erro ao iniciar Chrome: {e}", "ERROR")
        raise

# ====================
# TESTE PRINCIPAL
# ====================

def test_authentication():
    """
    Teste de autentica√ß√£o com certificado digital.

    Retorna:
        True se login bem-sucedido, False caso contr√°rio
    """
    driver = None
    success = False

    try:
        log("=" * 60)
        log("TESTE DE AUTENTICA√á√ÉO - e-SAJ TJSP")
        log("=" * 60)

        # 1. Iniciar Chrome
        driver = setup_chrome()

        # 2. Acessar e-SAJ
        log("üåê Acessando e-SAJ...")
        driver.get(ESAJ_URL)
        time.sleep(3)

        log(f"  ‚úÖ P√°gina carregada: {driver.title}")
        save_screenshot(driver, "01_esaj_homepage")

        # 3. Verificar se p√°gina carregou
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            log("  ‚úÖ P√°gina e-SAJ carregada corretamente")
        except Exception as e:
            log(f"  ‚ùå Erro ao carregar p√°gina: {e}", "ERROR")
            return False

        # 4. Procurar bot√£o "Certificado Digital"
        log("üîç Procurando bot√£o 'Certificado Digital'...")
        try:
            cert_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.LINK_TEXT, "Certificado Digital"))
            )
            log("  ‚úÖ Bot√£o 'Certificado Digital' encontrado!")
        except Exception as e:
            log(f"  ‚ùå Bot√£o n√£o encontrado: {e}", "ERROR")
            log("  ‚ÑπÔ∏è  Poss√≠veis causas:", "INFO")
            log("     - P√°gina mudou de layout", "INFO")
            log("     - Seletor precisa ser atualizado", "INFO")
            save_screenshot(driver, "02_button_not_found")
            return False

        # 5. Clicar no bot√£o "Certificado Digital"
        log("üñ±Ô∏è  Clicando em 'Certificado Digital'...")
        cert_button.click()
        time.sleep(2)
        save_screenshot(driver, "03_after_click_cert")

        # 6. MOMENTO CR√çTICO: Web Signer deve abrir modal
        log("=" * 60)
        log("‚è≥ AGUARDANDO WEB SIGNER ABRIR MODAL DE SELE√á√ÉO...")
        log("=" * 60)
        log("‚ÑπÔ∏è  Neste momento, o Native Messaging Protocol ser√° testado:")
        log("   1. Extens√£o Chrome ‚Üí envia mensagem ‚Üí Web Signer")
        log("   2. Web Signer ‚Üí abre modal nativo ‚Üí usu√°rio seleciona certificado")
        log("   3. Web Signer ‚Üí retorna certificado ‚Üí Extens√£o Chrome")
        log("   4. Login bem-sucedido no e-SAJ")
        log("")
        log("‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA:")
        log("   - Modal do Web Signer deve aparecer automaticamente")
        log("   - Selecione o certificado na lista")
        log("   - Aguarde redirecionamento")
        log("")

        # Aguardar 30 segundos para sele√ß√£o manual do certificado
        log("‚è±Ô∏è  Aguardando 30 segundos para sele√ß√£o do certificado...")
        for i in range(30, 0, -1):
            if i % 5 == 0:
                log(f"   ‚è≥ {i} segundos restantes...")
            time.sleep(1)

        # 7. Verificar se login foi bem-sucedido
        log("üîç Verificando se login foi bem-sucedido...")
        current_url = driver.current_url
        log(f"  URL atual: {current_url}")

        # Se URL mudou para portal autenticado
        if "portal.do?servico=" in current_url or "painel" in current_url.lower():
            log("=" * 60)
            log("‚úÖ‚úÖ‚úÖ LOGIN COM CERTIFICADO BEM-SUCEDIDO! ‚úÖ‚úÖ‚úÖ", "SUCCESS")
            log("=" * 60)
            log(f"URL p√≥s-login: {current_url}")
            save_screenshot(driver, "04_login_success")
            success = True

            # TESTE PASSOU! Native Messaging funcionou!
            log("")
            log("üéâ RESULTADO DO TESTE: SUCESSO! üéâ")
            log("‚úÖ Native Messaging Protocol funcionou corretamente!")
            log("‚úÖ Web Signer comunicou com extens√£o Chrome!")
            log("‚úÖ Autentica√ß√£o via certificado digital operacional!")
            log("")
            log("üìã Pr√≥ximos passos:")
            log("   1. Configurar orchestrator_subprocess.py")
            log("   2. Criar Windows Service")
            log("   3. Testar crawler_full.py completo")
            log("   4. Iniciar processamento de jobs")
            log("")

        else:
            log("=" * 60)
            log("‚ùå LOGIN FALHOU OU AINDA NA TELA DE AUTENTICA√á√ÉO", "ERROR")
            log("=" * 60)
            log(f"URL esperada: https://esaj.tjsp.jus.br/esaj/portal.do?servico=...")
            log(f"URL obtida:   {current_url}")
            save_screenshot(driver, "04_login_failed")

            log("")
            log("‚ùå RESULTADO DO TESTE: FALHA")
            log("Poss√≠veis causas:")
            log("   1. Modal do Web Signer n√£o abriu (Native Messaging falhou)")
            log("   2. Certificado n√£o foi selecionado")
            log("   3. Certificado expirado ou inv√°lido")
            log("   4. Web Signer n√£o est√° rodando")
            log("   5. Extens√£o n√£o est√° carregada no Chrome")
            log("")
            log("üîß Troubleshooting:")
            log("   - Verificar se Web Signer est√° rodando (bandeja do sistema)")
            log("   - Verificar extens√£o em chrome://extensions/")
            log("   - Verificar certificado em certmgr.msc")
            log("   - Tentar login manual para comparar comportamento")
            log("")

        # Aguardar antes de fechar
        log("‚è±Ô∏è  Aguardando 10 segundos antes de fechar...")
        time.sleep(10)

    except Exception as e:
        log(f"‚ùå ERRO DURANTE TESTE: {e}", "ERROR")
        if driver:
            save_screenshot(driver, "99_error")
        success = False

    finally:
        # Fechar Chrome
        if driver:
            log("üîí Fechando Chrome...")
            driver.quit()
            log("  ‚úÖ Chrome fechado")

        log("=" * 60)
        log(f"TESTE FINALIZADO: {'SUCESSO' if success else 'FALHA'}")
        log("=" * 60)
        log(f"üìù Log completo: {LOG_FILE}")
        log(f"üì∏ Screenshots: {SCREENSHOTS_DIR}")

    return success

# ====================
# EXECU√á√ÉO
# ====================

if __name__ == "__main__":
    print("")
    print("=" * 60)
    print("TESTE DE AUTENTICA√á√ÉO - CRAWLER TJSP")
    print("Windows Server - Valida√ß√£o de Native Messaging")
    print("=" * 60)
    print("")
    print("‚ö†Ô∏è  IMPORTANTE:")
    print("   - Certifique-se de que Web Signer est√° rodando")
    print("   - Certifique-se de que certificado est√° importado")
    print("   - Voc√™ precisar√° selecionar o certificado manualmente")
    print("")
    input("Pressione Enter para iniciar o teste...")
    print("")

    result = test_authentication()

    print("")
    if result:
        print("‚úÖ TESTE PASSOU! Migra√ß√£o para Windows foi bem-sucedida!")
        exit(0)
    else:
        print("‚ùå TESTE FALHOU! Verificar logs e troubleshooting.")
        exit(1)
